@startuml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!include FONTAWESOME/users.puml

AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")
AddRelTag(aggregate_root, $lineColor="red")

LAYOUT_TOP_DOWN()
'LAYOUT_WITH_LEGEND()
SHOW_PERSON_OUTLINE()
'HIDE_STEREOTYPE()

title Container Diagram for BarberShop System

Person(barber, "Barber", "Employee of the BarberShop")
Person(client, "Client", "Client of the BarberShop")
System_Boundary(barber_shop, "BarberShop System"){
    Container(webapp, "Web Application", "JavaScript, React", "Delivers the static content and the barbershop single page application to the employees' and clients' browser.")
    Container(single_page_app, "Single Page Application", "JavaScript, React", "Provides the barbershop functionality to employees and clients via their browser.")
    Container(api_gateway, "API Gateway", "Java, Spring Boot", "Provides BarberShop functionality via JSON/REST HTTPS API.")
    Container(clients_service, "clients-service", "Java, Spring Boot", "Provides clients functionality via JSON/REST HTTPS API.", $tags = "microService")
    Container(barbers_service, "barbers-service", "Java, Spring Boot", "Provides barbers functionality via JSON/REST HTTPS API.", $tags = "microService")
    Container(reviews_service, "reviews-service", "Java, Spring Boot", "Provides reviews functionality via JSON/REST HTTPS API.", $tags = "microService")
    Container(appointments_service, "appointments-service", "Java, Spring Boot", "Provides appointments functionality using the aggregator pattern via JSON/REST HTTPS API.", $tags = "microService")
    ContainerDb(clients_db, "Clients DB", "MySQL 5.5.x", "Stores client information.", $tags = "storage")
    ContainerDb(barbers_db, "Barbers DB", "Postgres", "Stores barber information.", $tags = "storage")
    ContainerDb(reviews_db, "Reviews DB", "MySQL 5.5.x", "Stores review information.", $tags = "storage")
    ContainerDb(appointments_db, "Appointments DB", "MongoDB", "Stores appointment information.", $tags = "storage")

    Rel(barber, webapp, "Visits barbershop.com using", "HTTPS")
    Rel(client, webapp, "Visits barbershop.com using", "HTTPS")
    Rel_R(webapp, single_page_app, "Delivers to the barbers' and client's web browser")
    Rel(barber, single_page_app, "Checks appointments and reviews", "HTTPS")
    Rel(client, single_page_app, "Books appointment and writes reviews", "HTTPS")
    Rel(single_page_app, api_gateway, "Makes API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, clients_service, "Makes API calls to", "JSON,REST,HTTPS")
    Rel(api_gateway, barbers_service, "Makes API calls to", "JSON,REST,HTTPS")
    Rel(api_gateway, reviews_service, "Makes API calls to", "JSON,REST,HTTPS")
    Rel(api_gateway, appointments_service, "Makes API calls to", "JSON,REST,HTTPS")

    Rel(appointments_service, clients_service, "Makes API calls to", "JSON/REST/HTTPS")
    Rel(appointments_service, barbers_service, "Makes API calls to", "JSON/REST/HTTPS")
    Rel(appointments_service, reviews_service, "Makes API calls to", "JSON/REST/HTTPS")

    Rel_D(clients_service, clients_db, "Reads from and writes to", "JDBC")
    Rel_D(barbers_service,barbers_db, "Reads from and writes to", "JDBC")
    Rel_D(reviews_service,reviews_db, "Reads from and writes to", "JDBC")
    Rel_R(appointments_service,appointments_db, "Reads from and writes to", "Mongo")

}

@enduml